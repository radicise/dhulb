struct S {

    addr*<T> address;/* TODO We'll talk about the angls brackets later*/
*    u32 length;
    u32 itemSize;
    addr*Array<T> constructor ( u32 size ) {
        addr*Array<T> structaddr = malloc(sizeof(Array));
        structaddr.itemSize = sizeof(T);
        structaddr.address = malloc(size * sizeof(T));
        structaddr.length = size;
        return structaddr;
    }
    addr*T getItem ( u32 idx ) {
        return @(address+(idx*itemSize));
    }
    u8 setItem ( T item, u32 idx ) {
        @(address+(idx*itemsize)) <- item;
        sizeof(T);
        /&
            
                testw %ax,$0x08
                jz setItem_size8
                testw %ax,$0x10
                jz setItem_size16
                testw %ax,$0x20
                jz setItem_size32
                movw %bp,%sp
                popw %bp
                movw $0x01,%ax
                retw
                setItem_8:
                movw 16(%bp),%bx
                movw (%bx),%bx
                movw 12(%bp),%cx
                movw (%ax,%cx,8)
                movb (%bp),%al
                

            
        &/
    }
    destroy () {
        free(address);
    }
}